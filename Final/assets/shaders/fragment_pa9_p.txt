#version 330

          uniform sampler2D textu;
          
          varying vec2 coord;

	  in vec3 location_v;

          in vec3 qN;
	  in vec3 qV;
          
          uniform float ambient_lighting;
	  uniform float diffuse_lighting;
	  uniform float specular_lighting;

          uniform float mat_shininess;
          uniform vec3 light_position[4];
          uniform vec4 light_color[4];

	  uniform vec3 camera_position;

          uniform mat4 modelMatrix; 

          void main(void) 
          {
	     vec4 v = modelMatrix*vec4(qV.xyz,1.0);
	     vec4 n = modelMatrix*vec4(qN.xyz,0.0);
	     vec3 N = normalize(n.xyz);

	     vec4 shade = vec4(0.0,0.0,0.0,0.0);

	     for (int iter = 0; iter < 4; iter++)
	     {
		vec3 L = normalize( (light_position[iter]).xyz - v.xyz );
		vec3 E = normalize( -v.xyz );
		vec3 H = normalize( 2.0*(dot(L,N))*N - L );
		vec3 B = normalize( camera_position - v.xyz );

		float Kd = max( dot(L,N),0.0 );
		float Ks = pow( max(dot(B,H),0.0), mat_shininess );
		if ( dot(L,N) < 0.0 ) { Ks = 0.0; }

		vec4 amb = vec4( ambient_lighting, ambient_lighting, ambient_lighting, 0.0);
		vec4 dif = vec4( diffuse_lighting*Kd, diffuse_lighting*Kd, diffuse_lighting*Kd, 0.0 );
		vec4 spc = vec4( specular_lighting*Ks, specular_lighting*Ks, specular_lighting*Ks, 0.0 );

		float dist = length( (light_position[iter]).xyz - v.xyz );
		float dim = min(2000.0/(dist*dist),4.0);

		shade += 0.20*amb + 0.20*spc + 0.20*dim*(dif*light_color[iter]);
	     }
	     shade.w = 1.0;

             gl_FragColor = vec4( (texture2D(textu, coord.xy)*shade).xyz, 1.0 );
          } 
