#version 330

          
          layout (location = 0) in vec3 v_position; 
          layout (location = 1) in vec3 v_norm; 
          layout (location = 2) in vec2 v_coord;
          
          varying vec2 coord;
          varying vec4 shade;

          uniform mat4 projectionMatrix; 
          uniform mat4 viewMatrix;
          uniform mat4 modelMatrix;

          uniform float ambient_lighting;
	  uniform float diffuse_lighting;
	  uniform float specular_lighting;

          uniform float mat_shininess;
          uniform vec3 light_position;
          uniform float spotlight_angle;

          void main(void) 
          { 
             vec4 v = vec4(v_position, 1.0); 
             gl_Position = (projectionMatrix * viewMatrix * modelMatrix) * v; 
             coord = v_coord; 

             vec3 L = normalize( (light_position).xyz - ((modelMatrix) * v).xyz );
	     vec3 E = normalize( -(modelMatrix * v).xyz );
             vec3 H = normalize( L + E );
             vec3 N = normalize( ((modelMatrix) * vec4(v_norm,0.0)).xyz ); 

	     vec3 location_v = ((modelMatrix) * v).xyz;
	     vec3 naqL = normalize( vec3(0.0,5.0,0.0) -location_v );
             vec3 naqH = normalize( naqL + E );

	     float Kd = max( dot(L,N),0.0 );
	     float Kd1 = max( dot(naqL,N),0.0 );
             float Ks = pow( max(dot(N, H),0.0), mat_shininess );
	     float Ks1 = pow( max(dot(N, naqH),0.0), mat_shininess );
             if ( dot(L,N) < 0.0 ) { Ks = 0.0; }
             if ( dot(naqL,N) < 0.0 ) { Ks1 = 0.0; }

	     vec3 nqL = normalize(light_position.xyz - location_v);

             if ( acos( nqL.y ) > spotlight_angle ) {
		Kd = 0.0; Ks = 0.0;
             }

             vec4 amb = vec4( ambient_lighting, ambient_lighting, ambient_lighting, 0.0);
             vec4 dif = vec4(    diffuse_lighting*Kd*0.5 + diffuse_lighting*Kd1*0.75,
				 diffuse_lighting*Kd*0.5 + diffuse_lighting*Kd1*0.65,
				 diffuse_lighting*Kd*0.75 + diffuse_lighting*Kd1*0.5, 0.0 );
             vec4 spc = vec4(    specular_lighting*Ks*0.5 + specular_lighting*Ks1*0.5,
				 specular_lighting*Ks*0.5 + specular_lighting*Ks1*0.5,
				 specular_lighting*Ks*0.5 + specular_lighting*Ks1*0.5, 0.0 );

             shade = amb + dif + spc;

          }
