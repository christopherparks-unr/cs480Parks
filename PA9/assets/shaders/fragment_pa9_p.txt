#version 330

          uniform sampler2D textu;
          
          varying vec2 coord;

	  in vec3 location_v;

          in vec3 qL;
          in vec3 qH;
          in vec3 qN;          

          out vec4 frag_color;
          
          uniform float ambient_lighting;
	  uniform float diffuse_lighting;
	  uniform float specular_lighting;
          uniform float mat_shininess;

          uniform vec3 light_position;
          uniform float spotlight_angle;

          void main(void) 
          { 
             float Kd = max( dot(qL,qN),0.0 );
             float Ks = pow( max(dot(qN, qH),0.0), mat_shininess );
             if ( dot(qL,qN) < 0.0 ) { Ks = 0.0; }

	     vec3 nqL = normalize(light_position.xyz - location_v);

             if ( acos( nqL.y ) > spotlight_angle ) {
		Kd = 0.0; Ks = 0.0;
             }

	     vec4 amb = vec4( ambient_lighting, ambient_lighting, ambient_lighting, 0.0);
             vec4 dif = vec4( diffuse_lighting*Kd, diffuse_lighting*Kd, diffuse_lighting*Kd, 0.0 );
             vec4 spc = vec4( specular_lighting*Ks, specular_lighting*Ks, specular_lighting*Ks, 0.0 );

             vec4 shade = amb + dif + spc;

             frag_color = vec4( (texture2D(textu, coord.xy)*shade).xyz, 1.0 );
          } 
